// For those who want the bleeding edge
buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.diffplug.spotless' version '5.14.3'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

import net.minecraftforge.gradle.common.tasks.SignJar

// Determine build number
String build_number = "DEV" // this will be referenced as simply build_number from now on.
if (System.getenv().BUILD_NUMBER)
    build_number = System.getenv().BUILD_NUMBER
if (System.getenv().TRAVIS_BUILD_NUMBER)
    build_number = System.getenv().TRAVIS_BUILD_NUMBER
if (System.getenv().GITHUB_RUN_ID)
    build_number = System.getenv().GITHUB_RUN_NUMBER
if (System.getenv().RELEASE || System.getenv().TRAVIS_TAG)
    build_number = "RELEASE"
logger.lifecycle "BUILDING VERSION: " + build_number

// Set mod details
version = project.mod_version
group = "org.cyclops.integratedterminalscompat"
archivesBaseName = "IntegratedTerminals-Compat"

// Set Java details
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.compilerArgs << "-Xmaxerrs" << "9999"
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Load secrets
def getSecrets() {
    Properties props = new Properties()
    if (file('./secrets.properties').exists()) {
        props.load(new FileInputStream(file('./secrets.properties')))
    }
    return props
}
Properties secrets = getSecrets();

sourceSets {
    main
    test
}

configurations {
    modLib
    implementation.extendsFrom modLib
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

repositories {
    mavenCentral()
	mavenLocal()
    maven {
        name "Cyclops Repo"
        url "https://maven.pkg.github.com/CyclopsMC/packages"
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("MAVEN_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("MAVEN_KEY")
        }
    }
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name "Curios"
        url "https://maven.theillusivec4.top/"
    }
    maven {
        name 'jared'
        url 'https://maven.blamejared.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // Add something like 'cyclopscore_version_local=0.1.0-DEV' to your secrets.properties if you want to use a custom local CyclopsCore version.
    if(secrets.cyclopscore_version_local) {
        implementation "org.cyclops.cyclopscore:cyclopscore:${project.minecraft_version}-${secrets.cyclopscore_version_local}:deobf"
    } else {
        implementation "org.cyclops.cyclopscore:cyclopscore:${project.minecraft_version}-${project.cyclopscore_version}:deobf"
    }
	
    // Add something like 'integrateddynamics_version_local=0.1.0-DEV' to your secrets.properties if you want to use a custom local Integrated Tunnels Compat version.
    if(secrets.integrateddynamics_version_local) {
        implementation ("org.cyclops.integrateddynamics:integrateddynamics:${secrets.integrateddynamics_version_local}:deobf") {
            transitive = false
        }
    } else {
        implementation ("org.cyclops.integrateddynamics:integrateddynamics:${project.integrateddynamics_version}:deobf") {
            transitive = false
        }
    }
	
    // Add something like 'integratedterminals_version_local=0.1.0-DEV' to your secrets.properties if you want to use a custom local Integrated Tunnels Compat version.
    if(secrets.integratedterminals_version_local) {
        implementation ("org.cyclops.integratedterminals:integratedterminals:${secrets.integratedterminals_version_local}:deobf") {
            transitive = false
        }
    } else {
        implementation ("org.cyclops.integratedterminals:integratedterminals:${project.integratedterminals_version}:deobf") {
            transitive = false
        }
    }

    if(secrets.commoncapabilities_version_local) {
        implementation ("org.cyclops.commoncapabilities:commoncapabilities:${secrets.commoncapabilities_version_local}:deobf") {
            transitive = false
        }
    } else {
        implementation ("org.cyclops.commoncapabilities:commoncapabilities:${project.commoncapabilities_version}:deobf") { // https://dl.bintray.com/cyclopsmc/dev/org/cyclops/commoncapabilities/CommonCapabilities/
            transitive = false
        }
    }

    modLib "com.google.re2j:re2j:1.1"

    implementation fg.deobf("mezz.jei:jei-${project.jei_version}") // https://maven.blamejared.com/mezz/jei/ https://dvs1.progwml6.com/jenkins/

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}") // https://maven.theillusivec4.top/top/theillusivec4/curios/curios-forge/
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}:api")
}

minecraft {
    mappings channel: "official", version: "${project.minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                integratedterminalscompat {
                    source sourceSets.main
                }
            }

            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                integratedterminalscompat {
                    source sourceSets.main
                }
            }

            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'integratedterminalscompat', '--all', '--output', file('src/generated/resources/')
            mods {
                integratedterminalscompat {
                    source sourceSets.main
                }
            }

            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

if (build_number.equals("RELEASE"))
    version = "${project.minecraft_version}-${project.mod_version}"
else
    version = "${project.minecraft_version}-${project.mod_version}-${build_number}"

jar {
    manifest {
        attributes([
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${project.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.getenv().SIGN_KEYSTORE
    }

    keyStore = System.getenv().SIGN_KEYSTORE
    alias = System.getenv().SIGN_ALIAS
    storePass = System.getenv().SIGN_STOREPASS
    keyPass = System.getenv().SIGN_KEYPASS
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
build.dependsOn signJar

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes([
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${project.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

publishing {
    repositories {
        if (project.hasProperty("filesmaven_url")) {
            logger.info('Publishing to files server')
            maven {
                url project.filesmaven_url
                credentials {
                    username = project.filesmaven_username
                    password = project.filesmaven_key
                }
            }
        } else if (System.getenv("MAVEN_URL")) {
            logger.info('Publishing to files server')
            maven {
                url System.getenv("MAVEN_URL")
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_KEY")
                }
            }
        } else {
            logger.error('No maven repo was set!')
        }
    }

    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar, javadocJar, deobfJar, sourcesJar]
            publication.artifactId = project.archivesBaseName.toLowerCase() // GH can't handle uppercase...
        }
    }
}

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

spotless {
    java {
        target 'src/*/java/org/cyclops/**/*.java'

        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        indentWithSpaces()
    }
}

tasks.register('updateGitHooks', Copy) {
    from './scripts/pre-commit'
    into './.git/hooks'
}
compileJava.dependsOn updateGitHooks
